{
  "scopeName": "source.pyle",
  "name": "Pyle",
  "patterns": [
    { "include": "#constant-declarations" },
    { "include": "#functions" },
    { "include": "#keywords" },
    { "include": "#function-calls" },
    { "include": "#language-constants" },
    { "include": "#range" },
    { "include": "#numbers" },
    { "include": "#strings" },
    { "include": "#identifiers" },
    { "include": "#comments" },
    { "include": "#operators" },
    { "include": "#brackets" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.pyle",
          "match": "\\b(and|or|not|for|in|if|else|while|return|continue|break|fn|let)\\b"
        }
      ]
    },
    "language-constants": {
      "patterns": [
        {
          "name": "constant.language.pyle",
          "match": "\\b(null|true|false)\\b"
        },
        {
          "name": "variable.language.self.pyle",
          "match": "\\bself\\b"
        }
      ]
    },
    "range": {
      "patterns": [
        {
          "name": "constant.numeric.range.pyle",
          "match": "\\b(\\d+):(\\d+)(:(\\d+))?\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.pyle",
          "match": "\\b\\d+(?:\\.\\d+)?\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.pyle",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.pyle",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.pyle",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.pyle",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.pyle",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "punctuation.accessor.pyle",
          "match": "\\."
        },
        {
          "name": "keyword.operator.pyle",
          "match": "[\\+\\-\\*/%=!<>]"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.section.brackets.pyle",
          "match": "[\\[\\]\\(\\)\\{\\}]"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.pyle",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.pyle",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "constant-declarations": {
      "patterns": [
        {
          "comment": "Highlights the name of a constant upon declaration. Highlighting on reference is not possible with TextMate grammars as it requires semantic understanding of the code.",
          "name": "meta.declaration.constant.pyle",
          "match": "\\b(const)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type.pyle" },
            "2": { "name": "variable.other.constant.pyle" }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.pyle",
          "begin": "\\b(fn)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "storage.type.function.pyle" },
            "2": { "name": "entity.name.function.pyle" }
          },
          "end": "(?=\\()",
          "patterns": []
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "meta.function-call.pyle",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()",
          "captures": {
            "1": { "name": "entity.name.function.pyle" },
            "2": { "name": "punctuation.section.arguments.begin.pyle" }
          }
        }
      ]
    }
  }
}